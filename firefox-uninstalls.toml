# Monitoring of Firefox uninstall telemetry.

[project]

name = "Firefox Uninstalls"
platform = "firefox_desktop"
xaxis = "submission_date"
start_date = "2021-11-01"
# We want continuous monitoring of this data:
# end_date =
skip_default_metrics = true

metrics = [
    "uninstall_volume_total",
    # "uninstall_volume_win7",
    # "uninstall_volume_win8",
    # "uninstall_volume_win8_1",
    # "uninstall_volume_win10",
    # "uninstall_volume_win11",
]

# alerts = [
#     "uninstall_volume",
# ]

[project.population]

data_source = "firefox_uninstalls"
monitor_entire_population = true
dimensions = ["release_channel", "windows_version"]

[dimensions.windows_version]
data_source = "firefox_uninstalls"
select_expression = "windows_version_info"
friendly_name = "Windows Version"
description = "Windows version, like 'Windows 11', 'Windows 10', etc.  See https://github.com/mozilla/bigquery-etl/blob/generated-sql/sql/mozfun/norm/windows_version_info/udf.sql."

[dimensions.normalized_channel]
data_source = "firefox_uninstalls"
select_expression = "normalized_channel"
friendly_name = "Channel"
description = "Release channel, like 'release', 'beta', 'nightly', 'esr', 'devedition'."

[data_sources]

[data_sources.firefox_uninstalls]
from_expression = """
    (
        SELECT 
            DATE(submission_timestamp) AS submission_date,
            substr(application.build_id, 0, 10) AS build_id,
            client_id,
            mozfun.norm.windows_version_info(
              environment.system.os.name,
              environment.system.os.version,
              CAST(environment.system.os.windows_build_number AS INT64)) AS windows_version_info,
            normalized_channel
        FROM mozdata.telemetry.uninstall
    )
"""
submission_date_column = "submission_date"
build_id_column = "build_id"
client_id_column = "client_id"

        # WHERE 
        #     DATE(submission_timestamp) >= '2022-11-01'
        #     AND sample_id = 9

# [project.metric_groups.uninstalls_by_os]
# friendly_name = "Uninstalls by OS"
# description = "Breakdown of uninstalls by OS"
# metrics = [
#     "uninstall_volume_win7",
#     "uninstall_volume_win8",
#     "uninstall_volume_win8_1",
#     "uninstall_volume_win10"
# ]

[metrics]

[metrics.uninstall_volume]
data_source = "firefox_uninstalls"
# This counts at most one uninstall per client per day.  We sometimes
# witness single client IDs corresponding to multiple uninstalls (on
# the same day, even!), but it should be very rare.
select_expression = "CAST(LOGICAL_OR(os_version != 'Other') AS INT64)"
type = "scalar"

[metrics.uninstall_volume.statistics]
sum = {}
# mean = {}

# [metrics.install_volume_win7]
# data_source = "firefox_installs"
# select_expression = "IF(ANY_VALUE(os) = 'Win7', IF(LOGICAL_OR(succeeded), 1, 0) * 100, NULL)"
# type = "scalar"

# [metrics.install_volume_win7.statistics]
# sum = {}
# mean = {}

# [metrics.install_volume_win8]
# data_source = "firefox_installs"
# select_expression = "IF(ANY_VALUE(os) = 'Win8', IF(LOGICAL_OR(succeeded), 1, 0) * 100, NULL)"
# type = "scalar"

# [metrics.install_volume_win8.statistics]
# sum = {}
# mean = {}

# [metrics.install_volume_win8_1]
# data_source = "firefox_installs"
# select_expression = "IF(ANY_VALUE(os) = 'Win8.1', IF(LOGICAL_OR(succeeded), 1, 0) * 100, NULL)"
# type = "scalar"

# [metrics.install_volume_win8_1.statistics]
# sum = {}
# mean = {}

# [metrics.install_volume_win10]
# data_source = "firefox_installs"
# select_expression = "IF(ANY_VALUE(os) = 'Win10', IF(LOGICAL_OR(succeeded), 1, 0) * 100, NULL)"
# type = "scalar"

# [metrics.install_volume_win10.statistics]
# sum = {}
# mean = {}

# [alerts]

# [alerts.install_success_rate_win]
# type = "threshold"
# metrics = [
#     "install_volume_win7",
#     "install_volume_win8_1",
#     "install_volume_win10"
# ]
# min = [90]

# [alerts.install_success_rate_win8]
# type = "threshold"
# metrics = [
#     "install_volume_win8",
# ]
# min = [86]
